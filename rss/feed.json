{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spencer Sharp",
    "feed_url": "undefined/rss/feed.json",
    "description": "Your blog description",
    "icon": "undefined/favicon.ico",
    "author": {
        "name": "Spencer Sharp"
    },
    "items": [
        {
            "id": "undefined/articles/introducing-animaginary",
            "content_html": "<p>Introduction:\nMultitenancy is a powerful architectural concept that allows a single instance of an application to serve multiple clients, known as tenants, while keeping their data and configurations isolated from each other. In this article, we will explore how to implement multitenancy in a Spring Boot application. We will discuss different approaches and provide a sample code snippet to demonstrate the implementation.</p>\n<p>Understanding Multitenancy:\nMultitenancy can be achieved through various strategies, such as separate databases, shared database with schema separation, or shared database with data segregation. In this example, we will focus on the approach of using a shared database with schema separation, where each tenant has its own dedicated database schema.</p>\n<p>Sample Code Snippet:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultitenancyConfig</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">multitenantDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MultitenantDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MultitenantDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// Configure your data source properties here</span>\n        \n        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiTenantConnectionProvider</span> <span class=\"token function\">multiTenantConnectionProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Implement your own MultiTenantConnectionProvider</span>\n        <span class=\"token comment\">// that provides tenant-specific database connections</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourMultiTenantConnectionProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CurrentTenantIdentifierResolver</span> <span class=\"token function\">currentTenantIdentifierResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Implement your own CurrentTenantIdentifierResolver</span>\n        <span class=\"token comment\">// that resolves the current tenant identifier</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourCurrentTenantIdentifierResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span> <span class=\"token function\">entityManagerFactory</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">MultiTenantConnectionProvider</span> multiTenantConnectionProvider<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">CurrentTenantIdentifierResolver</span> currentTenantIdentifierResolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span> emf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalContainerEntityManagerFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emf<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emf<span class=\"token punctuation\">.</span><span class=\"token function\">setPackagesToScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;com.your.package&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">HibernateJpaVendorAdapter</span> vendorAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HibernateJpaVendorAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emf<span class=\"token punctuation\">.</span><span class=\"token function\">setJpaVendorAdapter</span><span class=\"token punctuation\">(</span>vendorAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">.</span></span>Environment</span><span class=\"token punctuation\">.</span>MULTI_TENANT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MultiTenancyStrategy</span><span class=\"token punctuation\">.</span>SCHEMA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">.</span></span>Environment</span><span class=\"token punctuation\">.</span>MULTI_TENANT_CONNECTION_PROVIDER<span class=\"token punctuation\">,</span> multiTenantConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>cfg<span class=\"token punctuation\">.</span></span>Environment</span><span class=\"token punctuation\">.</span>MULTI_TENANT_IDENTIFIER_RESOLVER<span class=\"token punctuation\">,</span> currentTenantIdentifierResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        emf<span class=\"token punctuation\">.</span><span class=\"token function\">setJpaPropertyMap</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> emf<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JpaTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityManagerFactory</span> emf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JpaTransactionManager</span><span class=\"token punctuation\">(</span>emf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Conclusion:\nImplementing multitenancy in a Spring Boot application enables you to efficiently serve multiple clients while maintaining data isolation. In this article, we explored the approach of using a shared database with schema separation and provided a sample code snippet demonstrating the configuration required. Feel free to experiment with this code and adapt it to your specific requirements.</p>",
            "url": "undefined/articles/introducing-animaginary",
            "title": "Multi-tenancy in  Spring Boot",
            "summary": "Multi Tenancy is a software  architecture where a single software instance can serve  multiple, disting group of users.  Each user or group of users is called tenant.",
            "date_modified": "2022-09-02T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "undefined/articles/rewriting-the-cosmos-kernel-in-rust",
            "content_html": "<p><a href=\"https://github.com/festuskerich/graphql-springboot\">https://github.com/festuskerich/graphql-springboot</a></p>",
            "url": "undefined/articles/rewriting-the-cosmos-kernel-in-rust",
            "title": "Spring Boot graphQL",
            "summary": "Spring Boot with GraphQL: Powerful API development, simplified queries, efficient data fetching, and enhanced flexibility for modern applications.",
            "date_modified": "2022-07-14T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        }
    ]
}